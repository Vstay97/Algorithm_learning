    class Solution {
        boolean carPooling(int[][] trips, int capacity) {
            // 最多有 1000 个车站
            int[] nums = new int[1001];
            // 构造差分解法
            Diff df = new Diff(nums);

            for (int[] trip : trips) {
                // 乘客数量
                int val = trip[0];
                // 第 trip[1] 站乘客上车
                int i = trip[1];
                // 第 trip[2] 站乘客已经下车，
                // 即乘客在车上的区间是 [trip[1], trip[2] - 1]
                int j = trip[2] - 1;
                // 进行区间操作
                df.increament(i, j, val);
            }

            int[] res = df.result();

            // 客车自始至终都不应该超载
            for (int i = 0; i < res.length; i++) {
                if (capacity < res[i]) {
                    return false;
                }
            }
            return true;
        }

    }

    class Diff {
        private int[] diff;

        public Diff() {
        }

        // 初始化差分数组
        public Diff(int[] nums) {
            diff = new int[nums.length];
            diff[0] = nums[0];
            for (int i = 1; i < nums.length; i++) {
                diff[i] = nums[i] - nums[i - 1];
            }
        }

        // val删减
        public void increament(int i, int j, int val) {
            diff[i] += val;
            if (j + 1 < diff.length)
                diff[j] -= val;
        }

        // 显示结果
        public int[] result() {
            int[] ans = new int[diff.length];
            ans[0] = diff[0];
            for (int i = 1; i < diff.length; i++) {
                ans[i] = diff[i] + ans[i - 1];
            }
            return ans;
        }
    }

//total_testcases:59
//total_correct:46
//input_formatted:[[7,5,6],[6,7,8],[10,1,6]]
16
//expected_output:false
//code_output:true
