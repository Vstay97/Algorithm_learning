package hello.oop.demo06.rewrite;

/**
 * 重载是复用方法, 重写是定义自己的方法 但是用同样的方法实现方法的多样性
 * 子类重写了父类的方法后,父类的引用可以使用子类创建对象中被重写的方法
 */

public class Application {
	public static void main(String[] args) {
		/**
		 * 静态方法: 谁定义的就用谁的, 方法的调用只和左边, 定义的数据类型有关
		 *      因为静态方法是类的方法，而非静态方法是对象的方法.
		 *      有static时，b调用了B类的方法，因为b是用b类定义的
		 *      没有static时，b调用的是对象的方法，而b是用A类new的
		 *
		 * 多态实际上就是动态绑定,调用的方法并不是在编译器决定的,而是根据运行时实际引用的对象类型来决定真实调用的方法
		 */
		// 对象能执行哪些方法,主要看对象左边的类型, 和右边关系不大
		A a = new A();
		a.test();
		
		// 父类的引用指向了子类
		// 一个B类型的引用b ,但是new了一个A的对象
		// 子类重写了父类的方法
		B b = new A();
		b.test();
		
		/*
		 * 非静态方法print:
		 *       A ==> test
		 *       A ==> test
		 * 静态方法print:
		 *       A ==> test
		 *       B ==> test
		 * */
		
	}
}
